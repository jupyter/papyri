



einsum(subscripts, *operands, out=None, dtype=None, order=None, casting=None, optimize=None)

AttributesExtended Summary
Using the Einstein summation convention, many common multi-dimensional, linear
algebraic array operations can be represented in a simple fashion. In implicit
mode :None:None:`einsum`
 computes these values.
In explicit mode, :None:None:`einsum`
 provides further flexibility to compute other array operations that might not
be considered classical Einstein summation operations, by disabling, or forcing
summation over specified subscript labels.
See the notes and examples for clarification.
        Methods

Notes


│..  versionadded 1.6.0::
│


The Einstein summation convention can be used to compute many multi-
dimensional, linear algebraic array operations. :None:None:`einsum`
 provides a succinct way of representing these.
A non-exhaustive list of these operations, which can be computed by
:None:None:`einsum`
, is shown below along with examples:
  -Trace of an array, numpy.trace.
  -Return a diagonal, numpy.diag.
  -Array axis summations, numpy.sum.
  -Transpositions and permutations, numpy.transpose.
  -Matrix multiplication and dot product, numpy.matmul numpy.dot.
  -Vector inner and outer products, numpy.inner numpy.outer.
  -Broadcasting, element-wise and scalar multiplication, numpy.multiply.
  -Tensor contractions, numpy.tensordot.
  -Chained array operations, in efficient calculation order, numpy.einsum_path.


The subscripts string is a comma-separated list of subscript labels, where each
label refers to a dimension of the corresponding operand. Whenever a label is
repeated it is summed, so np.einsum('i,i', a, b) is equivalent to np.inner(a,b)
<numpy.inner>. If a label appears only once, it is not summed, so
np.einsum('i', a) produces a view of a with no changes. A further example
np.einsum('ij,jk', a, b) describes traditional matrix multiplication and is
equivalent to np.matmul(a,b) <numpy.matmul>. Repeated subscript labels in one
operand take the diagonal. For example, np.einsum('ii', a) is equivalent to
np.trace(a) <numpy.trace>.
In implicit mode, the chosen subscripts are important since the axes of the
output are reordered alphabetically.  This means that np.einsum('ij', a)
doesn't affect a 2D array, while np.einsum('ji', a) takes its transpose.
Additionally, np.einsum('ij,jk', a, b) returns a matrix multiplication, while,
np.einsum('ij,jh', a, b) returns the transpose of the multiplication since
subscript 'h' precedes subscript 'i'.
In explicit mode the output can be directly controlled by specifying output
subscript labels.  This requires the identifier '->' as well as the list of
output subscript labels. This feature increases the flexibility of the function
since summing can be disabled or forced when required. The call
np.einsum('i->', a) is like np.sum(a, axis=-1) <numpy.sum>, and
np.einsum('ii->i', a) is like np.diag(a) <numpy.diag>. The difference is that
:None:None:`einsum`
 does not allow broadcasting by default. Additionally np.einsum('ij,jh->ih', a,
b) directly specifies the order of the output subscript labels and therefore
returns matrix multiplication, unlike the example above in implicit mode.
To enable and control broadcasting, use an ellipsis.  Default NumPy-style
broadcasting is done by adding an ellipsis to the left of each term, like
np.einsum('...ii->...i', a). To take the trace along the first and last axes,
you can do np.einsum('i...i', a), or to do a matrix-matrix product with the
left-most indices instead of rightmost, one can do
np.einsum('ij...,jk...->ik...', a, b).
When there is only one operand, no axes are summed, and no output parameter is
provided, a view into the operand is returned instead of a new array.  Thus,
taking the diagonal as np.einsum('ii->i', a) produces a view (changed in
version 1.10.0).
:None:None:`einsum`
 also provides an alternative way to provide the subscripts and operands as
einsum(op0, sublist0, op1, sublist1, ..., [sublistout]). If the output shape is
not provided in this format :None:None:`einsum`
 will be calculated in implicit mode, otherwise it will be performed
explicitly. The examples below have corresponding :None:None:`einsum`
 calls with the two parameter methods.


│..  versionadded 1.10.0::
│


Views returned from einsum are now writeable whenever the input array is
writeable. For example, np.einsum('ijk...->kji...', a) will now have the same
effect as np.swapaxes(a, 0, 2) <numpy.swapaxes> and np.einsum('ii->i', a) will
return a writeable view of the diagonal of a 2D array.


│..  versionadded 1.12.0::
│


Added the optimize argument which will optimize the contraction order of an
einsum expression. For a contraction with three or more operands this can
greatly increase the computational efficiency at the cost of a larger memory
footprint during computation.
Typically a 'greedy' algorithm is applied which empirical tests have shown
returns the optimal path in the majority of cases. In some cases 'optimal' will
return the superlative path through a more expensive, exhaustive search. For
iterative calculations it may be advisable to calculate the optimal path once
and reuse that path by supplying it as an argument. An example is given below.
See numpy.einsum_path for more details.
Other ParametersParameters
               subscripts : Specifies the subscripts for summation as comma separated
        list of subscript labels. An implicit (classical Einstein summation)
        calculation is performed unless the explicit indicator '->' is included as well
        as subscript labels of the precise output form.       operands : These are the
        arrays for the operation.       out : If provided, the calculation is done into
        this array.       dtype : If provided, forces the calculation to use the data
        type specified. Note that you may have to also give a more liberal casting
        parameter to allow the conversions. Default is None.       order : Controls the
        memory layout of the output. 'C' means it should be C contiguous. 'F' means it
        should be Fortran contiguous, 'A' means it should be 'F' if the inputs are all
        'F', 'C' otherwise. 'K' means it should be as close to the layout as the inputs
        as is possible, including arbitrarily permuted axes. Default is 'K'.
        casting : Controls what kind of data casting may occur.  Setting this to
        'unsafe' is not recommended, as it can adversely affect accumulations.  -'no'
        means the data types should not be cast at all.
          -'equiv' means only byte-order changes are allowed.
          -'safe' means only casts which can preserve values are allowed.
          -'same_kind' means only safe casts or casts within a kind,     like float64
        to float32, are allowed.
          -'unsafe' means any data conversions may be done.

        Default is 'safe'.       optimize : Controls if intermediate optimization
        should occur. No optimization will occur if False and True will default to the
        'greedy' algorithm. Also accepts an explicit contraction list from the
        np.einsum_path function. See np.einsum_path for more details. Defaults to
        False.Raises        Receives

Returns
               output : The calculation based on the Einstein summation convention.Summary
Evaluates the Einstein summation convention on the operands.
        Warnings

WarnsYieldsSee Also
    dot(1227, <Link: self.value='dot' self.reference=RefInfo(module='current-module', version='current-version', kind='to-resolve', path='dot') self.kind='module' self.exists=True>?)
        
    einops(1227, <Link: self.value='einops' self.reference=RefInfo(module='current-module', version='current-version', kind='to-resolve', path='einops') self.kind='module' self.exists=True>?)
        similar verbose interface is provided by :None:None:`einops <https://github.com/arogozhnikov/einops>`
 package to cover additional operations: transpose, reshape/flatten, repeat/tile, squeeze/unsqueeze and reductions.
    einsum_path
        
    inner(1227, <Link: self.value='inner' self.reference=RefInfo(module='current-module', version='current-version', kind='to-resolve', path='inner') self.kind='module' self.exists=True>?)
        
    linalg.multi_dot(1227, <Link: self.value='linalg.multi_dot' self.reference=RefInfo(module='current-module', version='current-version', kind='to-resolve', path='linalg.multi_dot') self.kind='module' self.exists=True>?)
        
    opt_einsum(1227, <Link: self.value='opt_einsum' self.reference=RefInfo(module='current-module', version='current-version', kind='to-resolve', path='opt_einsum') self.kind='module' self.exists=True>?)
        :None:None:`opt_einsum <https://optimized-einsum.readthedocs.io/en/stable/>`
 optimizes contraction order for einsum-like expressions in backend-agnostic manner.
    outer(1227, <Link: self.value='outer' self.reference=RefInfo(module='current-module', version='current-version', kind='to-resolve', path='outer') self.kind='module' self.exists=True>?)
        
    tensordot(1227, <Link: self.value='tensordot' self.reference=RefInfo(module='current-module', version='current-version', kind='to-resolve', path='tensordot') self.kind='module' self.exists=True>?)
        


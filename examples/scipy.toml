[global]
module = 'scipy'
logo = "img/scipy_logo.png"
exec = true
submodules = [ "signal","misc"]
exclude = [
    # OTHER.
    "scipy.interpolate._fitpack_impl:spalde",

    "scipy.sparse.csgraph._traversal:breadth_first_tree",
    "scipy.sparse.csgraph._traversal:depth_first_tree",

    # Example is incorrect https://github.com/scipy/scipy/issues/15595
    "scipy.signal._peak_finding:_identify_ridge_lines",
    "scipy.stats._continuous_distns:crystalball_gen._pdf",
    "scipy.stats._ksstats:_kolmogn_PelzGood",
    "scipy.stats._discrete_distns:betabinom_gen",
    "scipy.stats._morestats:wilcoxon",
    "scipy.stats._distn_infrastructure:rv_continuous",
    "scipy.stats._stats_py:moment",
    "scipy.stats._mannwhitneyu:mannwhitneyu",
    "scipy.stats._resampling:bootstrap",
    "scipy.sparse.linalg._expm_multiply:expm_multiply",

    # contain ascii diagram
    "scipy.stats._continuous_distns:crystalball_gen._pdf",
    
    # assert len(tsc) in (0, 1), (tsc, data)
    "scipy.io.matlab._mio5"
            ]
exclude_jedi = [
    "scipy.linalg._sketches.clarkson_woodruff_transform",
    "scipy.optimize._lsq.least_squares.least_squares",
    "scipy.linalg.decomp_qr.qr",
    "scipy.linalg._decomp_cossin.cossin",
    "scipy.linalg.decomp.eigh_tridiagonal",
    "scipy.linalg.decomp.eigvalsh_tridiagonal",
    "scipy.linalg.decomp.hessenberg",
    "scipy.linalg.decomp_svd.null_space",
    "scipy.signal.bsplines.bspline",
    ]

execute_exclude_patterns = [
    'scipy._lib._uarray._backend:determine_backend_multi',
    'scipy.integrate._quadrature:_qmc_quad',
    'scipy.interpolate._bspl:evaluate_all_bspl',
    'scipy.optimize._root:root',
    'scipy.signal._filter_design:normalize',
    'scipy.signal._signaltools:filtfilt',
    'scipy.stats._axis_nan_policy:_broadcast_array_shapes_remove_axis',
    'scipy.stats._multivariate:multivariate_normal_frozen.__init__',
    'scipy.stats._multivariate:multivariate_t_frozen.__init__',
    'scipy.stats._stats_py:_ttest_nans',
    'scipy.io.matlab._mio5:varmats_from_mat',
    'scipy.io.matlab._byteordercodes:to_numpy_code',
    'scipy._lib._uarray._backend:determine_backend',
    'scipy._lib._uarray._backend:all_of_type',
    'scipy._lib._util._nan_allsame',
    ]
exec_failure = "fallback"
jedi_failure_mode = "log"
early_error = false

[meta]
github_slug = 'scipy/scipy'
tag = 'v{{version}}'
pypi = 'scipy'
homepage = 'https://scipy.org/'
docspage = 'https://docs.scipy.org/doc/scipy/'
[global.implied_imports]
scipy = 'scipy'
ua = 'scipy._lib.uarray'
array = 'numpy:array'
arange = 'numpy:arange'
[global.expected_errors]
VisitCitationReferenceNotImplementedError = [
    "scipy.constants",
    "scipy.integrate._ode:ode",
    "scipy.interpolate.interpnd:CloughTocher2DInterpolator",
    "scipy.optimize._nonlin:anderson",
    "scipy.optimize._zeros_py:brenth",
    "scipy.optimize._zeros_py:brentq",
    "scipy.optimize._lsq.least_squares:least_squares",
    "scipy.optimize._lsq.lsq_linear:lsq_linear",
    "scipy.optimize._zeros_py:ridder",
    "scipy.spatial._spherical_voronoi:SphericalVoronoi",
    "scipy.special._orthogonal:roots_chebyc",
    "scipy.special._orthogonal:roots_gegenbauer",
    "scipy.special._orthogonal:roots_hermite",
    "scipy.special._orthogonal:roots_hermitenorm",
    "scipy.special._orthogonal:roots_jacobi",
    "scipy.special._orthogonal:roots_sh_jacobi",
    "scipy.special._orthogonal:roots_laguerre",
    "scipy.special._orthogonal:roots_genlaguerre",
    "scipy.special._orthogonal:roots_legendre",
    "scipy.special._basic:polygamma",
    "scipy.special._orthogonal:roots_sh_legendre",
    "scipy.special._orthogonal:roots_chebys",
    "scipy.special._orthogonal:roots_chebyt",
    "scipy.special._orthogonal:roots_chebyu",
    "scipy.special._orthogonal:roots_sh_chebyt",
    "scipy.special._orthogonal:roots_sh_chebyu",
    "scipy.special._basic:zeta",
    "scipy.optimize._nonlin:Anderson",
    "scipy.spatial._spherical_voronoi:calculate_solid_angles",
    "scipy.special._orthogonal:_pbcf",
    "scipy.special._orthogonal",
    "scipy.optimize._lsq.dogbox",
    "scipy.optimize._lsq.trf",
    "scipy.stats._levy_stable:levy_stable_gen",
]
IncorrectInternalDocsLen = [
    "scipy.signal._spline:symiirorder1",
    "scipy.signal._spline:symiirorder2",
    "scipy.interpolate._fitpack_impl:bisplev",
    "scipy.interpolate._fitpack_py:spalde",
    "scipy.linalg._decomp:cdf2rdf",
    "scipy.linalg._special_matrices:fiedler",
    "scipy.signal._filter_design:_ellipdeg",
    "scipy.stats._ksstats:_kolmogn_PelzGood",
    "scipy.optimize._lsq.common:regularized_lsq_operator",
    "scipy.optimize._trustregion_constr.tr_interior_point:tr_interior_point",
    "scipy.sparse._bsr:_bsr_base.check_format",
    "scipy.optimize._trustregion_constr.tr_interior_point:BarrierSubproblem.gradient_and_jacobian",
]
AssertionError = [
    "scipy.stats._resampling:bootstrap",
    "scipy.stats._distn_infrastructure:rv_continuous",
    "scipy.io.matlab._mio5",
    "scipy.optimize._linprog_ip:_ip_hsd",
    "scipy.special._orthogonal:_compute_tauk",
]
ValueError = [
    "scipy.stats._stats_py:iqr",
    "scipy.stats._mannwhitneyu:mannwhitneyu",
    "scipy.stats._stats_py:moment",
    "scipy.stats._morestats:wilcoxon",
    "scipy.stats._continuous_distns:crystalball_gen._pdf",
]
NumpydocParseError = [
    "scipy.optimize._linprog_highs:_linprog_highs",
    "scipy.optimize._linprog_doc:_linprog_highs_doc",
    "scipy.optimize._linprog_doc:_linprog_highs_ds_doc",
    "scipy.optimize._linprog_doc:_linprog_highs_ipm_doc",
    "scipy.optimize._linprog_ip:_linprog_ip",
    "scipy.optimize._linprog_doc:_linprog_ip_doc",
    "scipy.optimize._linprog_rs:_linprog_rs",
    "scipy.optimize._linprog_doc:_linprog_rs_doc",
    "scipy.optimize._linprog_simplex:_linprog_simplex",
    "scipy.optimize._linprog_doc:_linprog_simplex_doc",
    "scipy.optimize._optimize:_minimize_powell",
    "scipy.optimize._qap:_quadratic_assignment_2opt",
    "scipy.optimize._qap:_quadratic_assignment_faq",
    "scipy.stats._discrete_distns:betabinom_gen",
    "scipy.stats._discrete_distns:geom_gen",
    "scipy.stats._discrete_distns:planck_gen",
    "scipy.special:btdtr",
    "scipy.special:btdtri",
]
ExampleError1 = [
    "scipy.stats._qmc:PoissonDisk",
]
